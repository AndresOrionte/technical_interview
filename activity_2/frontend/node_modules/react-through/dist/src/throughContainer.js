'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MAX_DATA_NUM = 1000000;

var throughContainer = function throughContainer(area) {
  return function (ThroughComponent) {
    var _class, _temp;

    var ThroughContainer = (_temp = _class = function (_React$Component) {
      _inherits(ThroughContainer, _React$Component);

      function ThroughContainer(props, context) {
        _classCallCheck(this, ThroughContainer);

        var _this = _possibleConstructorReturn(this, (ThroughContainer.__proto__ || Object.getPrototypeOf(ThroughContainer)).call(this, props, context));

        _this.doUpdate = function (data, syncUpdate) {
          _this.data = data;
          ++_this.dataNum;

          if (syncUpdate) {
            if (_this.canSetState) {
              _this.setState({ dataNum: _this.dataNum });
            }
            return;
          }

          if (!_this.timer) {
            _this.timer = setTimeout(function () {
              if (_this.dataNum > MAX_DATA_NUM) {
                _this.dataNum = 0;
              }
              if (_this.canSetState) {
                _this.setState({ dataNum: _this.dataNum });
              }
              _this.timer = undefined;
            }, 0);
          }
        };

        _this.state = {
          dataNum: MAX_DATA_NUM
        };
        _this.dataNum = MAX_DATA_NUM;
        _this.data = {};
        _this.timer = undefined;
        _this.mounted = false;
        _this.canSetState = false;
        return _this;
      }

      _createClass(ThroughContainer, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.unsubscribe = this.context.through.subscribe(area, this.doUpdate);
          this.canSetState = true;
          if (this.state.dataNum != this.dataNum) {
            this.doUpdate(this.data, true);
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.unsubscribe();
          this.canSetState = false;
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(ThroughComponent, _extends({}, this.props, _defineProperty({}, area, this.data)));
        }
      }]);

      return ThroughContainer;
    }(_react2.default.Component), _class.contextTypes = {
      through: _propTypes2.default.object
    }, _temp);


    return ThroughContainer;
  };
};

exports.default = throughContainer;