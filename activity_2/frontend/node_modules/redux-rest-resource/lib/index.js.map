{"version":3,"sources":["../src/index.js"],"names":["reduceReducers","combineReducers","mergeReducers","createResource","createResourceAction","fetch","HttpError","resourceName","name","resourcePluralName","pluralName","actions","givenActions","mergeDefaultActions","pick","pickedActions","args","resolvedActions","length","types","reducers","rootReducer","method","actionId","toLowerCase","scope","actionName"],"mappings":";;;;;;;;;AAIA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;oBACQA,c;;;;;;oBAAgBC,e;;;;;;oBAAiBC,a;;;QAGzBC,c,GAAAA,c;QA0BAC,oB,GAAAA,oB;;AApChB;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;;AARA;AACA;;QAWQC,K;QAAOC,S;AAER,SAASH,cAAT,OAOJ;AAAA,MANKI,YAML,QANDC,IAMC;AAAA,MALWC,kBAKX,QALDC,UAKC;AAAA,0BAJDC,OAIC;AAAA,MAJQC,YAIR,gCAJuB,EAIvB;AAAA,mCAHDC,mBAGC;AAAA,MAHDA,mBAGC,yCAHqB,IAGrB;AAAA,uBAFDC,IAEC;AAAA,MAFKC,aAEL,6BAFqB,EAErB;AAAA,MADEC,IACF;;AACD;AACA,MAAIC,kBAAkBJ,sBAAsB,wBAAa,EAAb,4BAAiCD,YAAjC,CAAtB,GAAuEA,YAA7F;AACA;AACA,MAAIG,cAAcG,MAAlB,EAA0B;AACxBD,sBAAkB,6BAAKA,eAAL,4BAAyBF,aAAzB,GAAlB;AACD;AACD,MAAMI,QAAQ,wBAAYF,eAAZ,aAA8BV,0BAA9B,EAA4CE,sCAA5C,IAAmEO,IAAnE,EAAd;AACA,MAAML,UAAU,6BAAcM,eAAd,aAAgCV,0BAAhC,EAA8CE,sCAA9C,IAAqEO,IAArE,EAAhB;AACA,MAAMI,WAAW,+BAAeH,eAAf,aAAiCV,0BAAjC,EAA+CE,sCAA/C,IAAsEO,IAAtE,EAAjB;AACA,MAAMK,cAAc,kCAAkBD,QAAlB,aAA6Bb,0BAA7B,EAA2CE,sCAA3C,IAAkEO,IAAlE,EAApB;AACA,SAAO;AACLL,oBADK;AAELS,cAAUC,WAFL,EAEkB;AACvBA,4BAHK;AAILF;AAJK,GAAP;AAMD;;AAEM,SAASf,oBAAT,QAKJ;AAAA,MAJKG,YAIL,SAJDC,IAIC;AAAA,MAHWC,kBAGX,SAHDC,UAGC;AAAA,2BAFDY,MAEC;AAAA,MAFDA,MAEC,gCAFQ,KAER;AAAA,MADEN,IACF;;AACD,MAAMO,WAAWD,OAAOE,WAAP,EAAjB;AACA,MAAMC,QAAQ,0BAAclB,YAAd,CAAd;AACA,MAAMY,QAAQ,uBAAW,uBAAWI,QAAX,EAAqB,EAAChB,0BAAD,EAAeE,sCAAf,EAArB,CAAX,EAAqEgB,KAArE,CAAd;AACA,MAAMC,aAAa,6BAAcH,QAAd,EAAwB,EAAChB,0BAAD,EAAeE,sCAAf,EAAxB,CAAnB;AACA,MAAME,8BAAYe,UAAZ,EAAyB,4BAAaH,QAAb,aAAwBhB,0BAAxB,EAAsCE,sCAAtC,EAA0DgB,YAA1D,IAAoET,IAApE,EAAzB,CAAN;AACA,MAAMI,+BAAaG,QAAb,EAAwB,8BAAcA,QAAd,aAAyBhB,0BAAzB,EAAuCE,sCAAvC,EAA2DgB,YAA3D,IAAqET,IAArE,EAAxB,CAAN;AACA,MAAMK,cAAc,kCAAkBD,QAAlB,aAA6Bb,0BAA7B,EAA2CE,sCAA3C,IAAkEO,IAAlE,EAApB;AACA,SAAO;AACLL,oBADK;AAELS,sBAFK,EAEK;AACVC,4BAHK;AAILF;AAJK,GAAP;AAMD","file":"index.js","sourcesContent":["\n// https://github.com/angular/angular.js/blob/master/src/ngResource/resource.js\n// var User = $resource('/user/:userId', {userId:'@id'});\n\nimport {defaultActions} from './defaults';\nimport {getActionName, createAction, createActions} from './actions';\nimport {createReducer, createReducers, createRootReducer} from './reducers';\nimport {createType, createTypes, getTypesScope, scopeTypes} from './types';\nimport fetch, {HttpError} from './helpers/fetch';\nimport {pick, mergeObjects} from './helpers/util';\n\nexport * from './defaults';\nexport {reduceReducers, combineReducers, mergeReducers} from './reducers/helpers';\nexport {fetch, HttpError};\n\nexport function createResource({\n  name: resourceName,\n  pluralName: resourcePluralName,\n  actions: givenActions = {},\n  mergeDefaultActions = true,\n  pick: pickedActions = [],\n  ...args\n}) {\n  // Merge passed actions with common defaults\n  let resolvedActions = mergeDefaultActions ? mergeObjects({}, defaultActions, givenActions) : givenActions;\n  // Eventually pick selected actions\n  if (pickedActions.length) {\n    resolvedActions = pick(resolvedActions, ...pickedActions);\n  }\n  const types = createTypes(resolvedActions, {resourceName, resourcePluralName, ...args});\n  const actions = createActions(resolvedActions, {resourceName, resourcePluralName, ...args});\n  const reducers = createReducers(resolvedActions, {resourceName, resourcePluralName, ...args});\n  const rootReducer = createRootReducer(reducers, {resourceName, resourcePluralName, ...args});\n  return {\n    actions,\n    reducers: rootReducer, // breaking change\n    rootReducer,\n    types\n  };\n}\n\nexport function createResourceAction({\n  name: resourceName,\n  pluralName: resourcePluralName,\n  method = 'GET',\n  ...args\n}) {\n  const actionId = method.toLowerCase();\n  const scope = getTypesScope(resourceName);\n  const types = scopeTypes(createType(actionId, {resourceName, resourcePluralName}), scope);\n  const actionName = getActionName(actionId, {resourceName, resourcePluralName});\n  const actions = {[actionName]: createAction(actionId, {resourceName, resourcePluralName, scope, ...args})};\n  const reducers = {[actionId]: createReducer(actionId, {resourceName, resourcePluralName, scope, ...args})};\n  const rootReducer = createRootReducer(reducers, {resourceName, resourcePluralName, ...args});\n  return {\n    actions,\n    reducers, // new API\n    rootReducer,\n    types\n  };\n}\n"]}