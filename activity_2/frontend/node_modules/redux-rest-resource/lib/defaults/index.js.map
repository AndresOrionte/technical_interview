{"version":3,"sources":["../../src/defaults/index.js"],"names":["defaultActions","create","method","alias","fetch","isArray","get","update","delete","defaultHeaders","Accept","defaultTransformResponsePipeline","res","then","body","transformedResponse","code","status","isPartialContent","contentRange","headers","defaultState","isCreating","items","isFetching","lastUpdated","didInvalidate","item","isFetchingItem","lastUpdatedItem","didInvalidateItem","isUpdating","isDeleting","initialState","Object","keys","reduce","soFar","key","defaultGlobals","Promise"],"mappings":";;;;;;;kQAAA;;AAEA;;AACA;;AAEA,IAAMA,iBAAiB;AACrBC,UAAQ,EAACC,QAAQ,MAAT,EAAiBC,OAAO,MAAxB,EADa;AAErBC,SAAO,EAACF,QAAQ,KAAT,EAAgBG,SAAS,IAAzB,EAFc;AAGrBC,OAAK,EAACJ,QAAQ,KAAT,EAHgB;AAIrBK,UAAQ,EAACL,QAAQ,OAAT,EAJa;AAKrBM,UAAQ,EAACN,QAAQ,QAAT;AALa,CAAvB;;AAQA,IAAMO,iBAAiB;AACrBC,UAAQ,kBADa;AAErB,kBAAgB;AAFK,CAAvB;;AAKA,IAAMC,mCAAmC,CACvC;AAAA,SAAO,0BAAcC,GAAd,EAAmBC,IAAnB,CAAwB,UAACC,IAAD,EAAU;AACvC,QAAMC,sBAAsB,EAACD,UAAD,EAAOE,MAAMJ,IAAIK,MAAjB,EAA5B;AACA;AACA,QAAMC,mBAAmBN,IAAIK,MAAJ,KAAe,GAAxC;AACA,QAAIC,gBAAJ,EAAsB;AACpBH,0BAAoBI,YAApB,GAAmC,mCAAwBP,IAAIQ,OAAJ,CAAYd,GAAZ,CAAgB,eAAhB,CAAxB,CAAnC;AACD;AACD,WAAOS,mBAAP;AACD,GARM,CAAP;AAAA,CADuC,CAAzC;;AAYA,IAAMM,eAAe;AACnBpB,UAAQ;AACNqB,gBAAY;AADN,GADW;AAInBlB,SAAO;AACLmB,WAAO,EADF;AAELC,gBAAY,KAFP;AAGLC,iBAAa,CAHR;AAILC,mBAAe;AAJV,GAJY;AAUnBpB,OAAK;AACHqB,UAAM,IADH;AAEHC,oBAAgB,KAFb;AAGHC,qBAAiB,CAHd;AAIHC,uBAAmB;AAJhB,GAVc;AAgBnBvB,UAAQ;AACNwB,gBAAY;AADN,GAhBW;AAmBnBvB,UAAQ;AACNwB,gBAAY;AADN;AAnBW,CAArB;;AAwBA,IAAMC,eAAeC,OAAOC,IAAP,CAAYd,YAAZ,EAA0Be,MAA1B,CAAiC,UAACC,KAAD,EAAQC,GAAR;AAAA,sBAAqBD,KAArB,EAA+BhB,aAAaiB,GAAb,CAA/B;AAAA,CAAjC,EAAqF,EAArF,CAArB;;AAEA,IAAMC,iBAAiB;AACrBC,kBADqB;AAErBpC;AAFqB,CAAvB;;QAMEmC,c,GAAAA,c;QACAvC,c,GAAAA,c;QACAS,c,GAAAA,c;QACAE,gC,GAAAA,gC;QACAU,Y,GAAAA,Y;QACAY,Y,GAAAA,Y","file":"index.js","sourcesContent":["/* global fetch */\n\nimport {parseResponse} from './../helpers/fetch';\nimport {parseContentRangeHeader} from './../helpers/util';\n\nconst defaultActions = {\n  create: {method: 'POST', alias: 'save'},\n  fetch: {method: 'GET', isArray: true},\n  get: {method: 'GET'},\n  update: {method: 'PATCH'},\n  delete: {method: 'DELETE'}\n};\n\nconst defaultHeaders = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json'\n};\n\nconst defaultTransformResponsePipeline = [\n  res => parseResponse(res).then((body) => {\n    const transformedResponse = {body, code: res.status};\n    // Add support for Content-Range parsing when a partial http code is used\n    const isPartialContent = res.status === 206;\n    if (isPartialContent) {\n      transformedResponse.contentRange = parseContentRangeHeader(res.headers.get('Content-Range'));\n    }\n    return transformedResponse;\n  })\n];\n\nconst defaultState = {\n  create: {\n    isCreating: false\n  },\n  fetch: {\n    items: [],\n    isFetching: false,\n    lastUpdated: 0,\n    didInvalidate: true\n  },\n  get: {\n    item: null,\n    isFetchingItem: false,\n    lastUpdatedItem: 0,\n    didInvalidateItem: true\n  },\n  update: {\n    isUpdating: false\n  },\n  delete: {\n    isDeleting: false\n  }\n};\n\nconst initialState = Object.keys(defaultState).reduce((soFar, key) => ({...soFar, ...defaultState[key]}), {});\n\nconst defaultGlobals = {\n  Promise,\n  fetch\n};\n\nexport {\n  defaultGlobals,\n  defaultActions,\n  defaultHeaders,\n  defaultTransformResponsePipeline,\n  defaultState,\n  initialState\n};\n"]}